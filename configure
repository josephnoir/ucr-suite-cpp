#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize.

# check for `cmake` command
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

command="$0 $*"
dirname_0=`dirname $0`
sourcedir=`cd $dirname_0 && pwd`
usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build Options:
    --generator=GENERATOR       set CMake generator (see cmake --help)
    --build-type=TYPE           set CMake build type [RelWithDebInfo]:
                                  - Debug: debugging flags enabled
                                  - MinSizeRel: minimal output size
                                  - Release: optimizations on, debugging off
                                  - RelWithDebInfo: release flags plus debugging
    --build-dir=DIR             place build files in directory [build]
    --bin-dir=DIR               executable directory [build/bin]
    --lib-dir=DIR               library directory [build/lib]
    --with-clang=FILE           path to clang++ executable
    --with-gcc=FILE             path to g++ executable
    --more-warnings             enables most warnings
    --no-auto-libc++            do not automatically enable libc++ for Clang
    --warnings-as-errors        build with '-Werror'

  Installation Directories:
    --prefix=PREFIX             installation directory [/usr/local]

  Debugging:
    --with-address-sanitizer    build with address sanitizer if available

  Influential Environment Variables (only on first invocation):
    CXX                         C++ compiler command
    CXXFLAGS                    C++ compiler flags
    LDFLAGS                     Additional linker flags
    CMAKE_GENERATOR     Selects a custom generator
"


# Appends a CMake cache entry definition to the CMakeCacheEntries variable.
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry ()
{
    case "$3" in
        *\ * )
            # string contains whitespace
            CMakeCacheEntries="$CMakeCacheEntries -D \"$1:$2=$3\""
            ;;
        *)
            # string contains whitespace
            CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
            ;;
    esac
}

# Creates a build directory via CMake.
#   $1 is the path to a compiler executable.
#   $2 is the suffix of the build directory.
#   $3 is the executable output path.
#   $4 is the library output path.
#   $5 is the CMake generator.
configure ()
{

    CMakeCacheEntries=$CMakeDefaultCache

    if [ -n "$1" ]; then
        append_cache_entry CMAKE_CXX_COMPILER FILEPATH $1
    fi

    case "$builddir" in
        /*)
            #absolute path given
            absolute_builddir="$builddir"
            ;;
        *)
            # relative path given; convert to absolute path
            absolute_builddir="$PWD/$builddir"
            ;;
    esac

    if [ -n "$2" ]; then
        workdir="$absolute_builddir-$2"
    else
        workdir="$absolute_builddir"
    fi
    workdirs="$workdirs $workdir"

    if [ -n "$3" ]; then
        append_cache_entry EXECUTABLE_OUTPUT_PATH PATH "$3"
    else
        append_cache_entry EXECUTABLE_OUTPUT_PATH PATH "$workdir/bin"
    fi

    if [ -n "$4" ]; then
        append_cache_entry LIBRARY_OUTPUT_PATH PATH "$4"
    else
        append_cache_entry LIBRARY_OUTPUT_PATH PATH "$workdir/lib"
    fi

    if [ -d "$workdir" ]; then
        # If a build directory exists, check if it has a CMake cache.
        if [ -f "$workdir/CMakeCache.txt" ]; then
            # If the CMake cache exists, delete it so that this configuration
            # is not tainted by a previous one.
            rm -f "$workdir/CMakeCache.txt"
        fi
    else
        mkdir -p "$workdir"
    fi

    cd "$workdir"

    if [ -n "$5" ]; then
        cmake -G "$5" $CMakeCacheEntries "$sourcedir"
    else
        cmake $CMakeCacheEntries "$sourcedir"
    fi

    printf "#!/bin/sh\n\n" > config.status
    printf "# Switch to the source of this build directory.\n" >> config.status
    printf "cd \"$sourcedir\"\n\n" >> config.status
    printf "# Invoke the command to configure this build.\n" >> config.status
    if [ -n "$CC" ]; then
      printf "CC=\"%s\"\n" "$CC" >> config.status
    fi
    if [ -n "$CXX" ]; then
      printf "CXX=\"%s\"\n" "$CXX" >> config.status
    fi
    if [ -n "$CXXFLAGS" ]; then
      printf "CXXFLAGS=\"%s\"\n" "$CXXFLAGS" >> config.status
    fi
    if [ -n "$LDFLAGS" ]; then
      printf "LDFLAGS=\"%s\"\n" "$LDFLAGS" >> config.status
    fi
    echo $command >> config.status
    chmod u+x config.status
}

# Set defaults.
builddir="$sourcedir/build"
CMakeCacheEntries=""
append_cache_entry CMAKE_INSTALL_PREFIX        PATH   /usr/local

# parse custom environment variable to initialize CMakeGenerator
if [ -n "$CMAKE_GENERATOR" ]; then
  CMakeGenerator="$CMAKE_GENERATOR"
fi

# Parse arguments.
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --generator=*)
            CMakeGenerator="$optarg"
            ;;
        --prefix=*)
            append_cache_entry CMAKE_INSTALL_PREFIX PATH "$optarg"
            ;;
        --with-address-sanitizer)
            append_cache_entry UCR_ENABLE_ADDRESS_SANITIZER BOOL yes
            ;;
        --more-warnings)
            append_cache_entry UCR_MORE_WARNINGS BOOL yes
            ;;
        --no-auto-libc++)
            append_cache_entry UCR_NO_AUTO_LIBCPP BOOL yes
            ;;
        --warnings-as-errors)
            append_cache_entry UCR_CXX_WARNINGS_AS_ERRORS BOOL yes
            ;;
        --with-clang=*)
            clang="$optarg"
            ;;
        --with-gcc=*)
            gcc="$optarg"
            ;;
        --build-type=*)
            append_cache_entry CMAKE_BUILD_TYPE STRING "$optarg"
            ;;
        --build-dir=*)
            builddir="$optarg"
            ;;
        --bin-dir=*)
            bindir="$optarg"
            ;;
        --lib-dir=*)
            libdir="$optarg"
            ;;
        --no-summary)
            append_cache_entry UCR_NO_SUMMARY BOOL yes
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

# At this point we save the global CMake variables so that configure() can
# later use them.
CMakeDefaultCache=$CMakeCacheEntries

if [ -n "$dualbuild" ]; then
    # Use what we got in $PATH if --with-clang or --with-gcc is not specified.
    if [ -z "$clang" ]; then
        clang=clang++
    fi
    if [ -z "$gcc" ]; then
        gcc=g++
    fi

    for i in gcc clang; do
        eval "compiler=\$$i"
        configure $compiler $i "" "" $CMakeGenerator
    done
else
    # Prefer Clang to GCC.
    if [ -n "$clang" ]; then
        compiler=$clang
    elif [ -n "$gcc" ]; then
        compiler=$gcc
    fi

    configure "$compiler" "" "$bindir" "$libdir" "$CMakeGenerator"
fi

if [ -n "$CMakeGenerator" ] && [ "$CMakeGenerator" != "Unix" ]; then
  # skip Makefile-specific code below when not using make
  exit 0
fi

printf "DIRS := %s\n\n" "$workdirs" > $sourcedir/Makefile
makefile=`cat <<'EOT'
all:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

test:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

install:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

uninstall:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

clean:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

distclean:
	rm -rf $(DIRS) Makefile

doc:
	$(MAKE) -C $(firstword $(DIRS)) $@

.PHONY: all test install uninstall clean distclean doc
EOT
`

echo "$makefile" >> $sourcedir/Makefile

